// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rooms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRoom = `-- name: GetRoom :one
select id, room_number, hotel_id, room_type_id, price, floor, status, created_at, updated_at from rooms where id =$1
`

func (q *Queries) GetRoom(ctx context.Context, id pgtype.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomNumber,
		&i.HotelID,
		&i.RoomTypeID,
		&i.Price,
		&i.Floor,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchRoom = `-- name: SearchRoom :many
select id, room_number, hotel_id, room_type_id, price, floor, status, created_at, updated_at from rooms 
where price < $1 
and hotel_id in (select id from hotels where ST_DWithin(location, ST_GeogPoint($2, $3), 1000))
and roon_id not in(select id from reservations where from_time between $4 and $5 or to_time between $4 and $5)
and $6 =(select room_type from room_types where id=room_type_id)
`

type SearchRoomParams struct {
	Price         float64
	StGeogpoint   interface{}
	StGeogpoint_2 interface{}
	FromTime      pgtype.Timestamptz
	FromTime_2    pgtype.Timestamptz
	RoomType      Roomtype
}

func (q *Queries) SearchRoom(ctx context.Context, arg SearchRoomParams) ([]Room, error) {
	rows, err := q.db.Query(ctx, searchRoom,
		arg.Price,
		arg.StGeogpoint,
		arg.StGeogpoint_2,
		arg.FromTime,
		arg.FromTime_2,
		arg.RoomType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.RoomNumber,
			&i.HotelID,
			&i.RoomTypeID,
			&i.Price,
			&i.Floor,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
update rooms set status =$1
where id= $2  
returning id, room_number, hotel_id, room_type_id, price, floor, status, created_at, updated_at
`

type UpdateRoomParams struct {
	Status RoomStatus
	ID     pgtype.UUID
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.Status, arg.ID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomNumber,
		&i.HotelID,
		&i.RoomTypeID,
		&i.Price,
		&i.Floor,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
