// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reservations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkOverlap = `-- name: CheckOverlap :one
select count(id) from reservations where room_id=$1 
                                    and (from_time between $2 and $3 or to_time between $2 and $3)
`

type CheckOverlapParams struct {
	RoomID     pgtype.UUID        `json:"room_id"`
	FromTime   pgtype.Timestamptz `json:"from_time"`
	FromTime_2 pgtype.Timestamptz `json:"from_time_2"`
}

func (q *Queries) CheckOverlap(ctx context.Context, arg CheckOverlapParams) (int64, error) {
	row := q.db.QueryRow(ctx, checkOverlap, arg.RoomID, arg.FromTime, arg.FromTime_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReservation = `-- name: CreateReservation :one
insert into reservations (room_id,first_name,last_name,phone_number,email,status,from_time,to_time)
values($1,$2,$3,$4,$5,$6,$7,$8) 
returning id, room_id, first_name, last_name, phone_number, email, status, from_time, to_time, created_at, updated_at, deleted_at
`

type CreateReservationParams struct {
	RoomID      pgtype.UUID        `json:"room_id"`
	FirstName   string             `json:"first_name"`
	LastName    string             `json:"last_name"`
	PhoneNumber string             `json:"phone_number"`
	Email       string             `json:"email"`
	Status      ReservationStatus  `json:"status"`
	FromTime    pgtype.Timestamptz `json:"from_time"`
	ToTime      pgtype.Timestamptz `json:"to_time"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, createReservation,
		arg.RoomID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Email,
		arg.Status,
		arg.FromTime,
		arg.ToTime,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Status,
		&i.FromTime,
		&i.ToTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getReservationStatus = `-- name: GetReservationStatus :one
select status from reservations where id =$1
`

func (q *Queries) GetReservationStatus(ctx context.Context, id pgtype.UUID) (ReservationStatus, error) {
	row := q.db.QueryRow(ctx, getReservationStatus, id)
	var status ReservationStatus
	err := row.Scan(&status)
	return status, err
}

const getRoomReservations = `-- name: GetRoomReservations :many
select id, room_id, first_name, last_name, phone_number, email, status, from_time, to_time, created_at, updated_at, deleted_at from reservations where room_id =$1 and (from_time > now() or to_time > now())
`

func (q *Queries) GetRoomReservations(ctx context.Context, roomID pgtype.UUID) ([]Reservation, error) {
	rows, err := q.db.Query(ctx, getRoomReservations, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Email,
			&i.Status,
			&i.FromTime,
			&i.ToTime,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
update reservations set status=$1 where id =$2 returning id, room_id, first_name, last_name, phone_number, email, status, from_time, to_time, created_at, updated_at, deleted_at
`

type UpdateReservationParams struct {
	Status ReservationStatus `json:"status"`
	ID     pgtype.UUID       `json:"id"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, updateReservation, arg.Status, arg.ID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Status,
		&i.FromTime,
		&i.ToTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
