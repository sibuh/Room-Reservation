// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reservations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReservation = `-- name: CreateReservation :one
insert into reservations (room_id,user_id,status,from_time,to_time)
values($1,$2,$3,$4,$5) 
returning id, room_id, user_id, status, from_time, to_time
`

type CreateReservationParams struct {
	RoomID   pgtype.UUID        `json:"room_id"`
	UserID   pgtype.UUID        `json:"user_id"`
	Status   ReservationStatus  `json:"status"`
	FromTime pgtype.Timestamptz `json:"from_time"`
	ToTime   pgtype.Timestamptz `json:"to_time"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, createReservation,
		arg.RoomID,
		arg.UserID,
		arg.Status,
		arg.FromTime,
		arg.ToTime,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.UserID,
		&i.Status,
		&i.FromTime,
		&i.ToTime,
	)
	return i, err
}

const getRoomReservations = `-- name: GetRoomReservations :many
select id, room_id, user_id, status, from_time, to_time from reservations where room_id =$1 and (from_time > now() or to_time > now())
`

func (q *Queries) GetRoomReservations(ctx context.Context, roomID pgtype.UUID) ([]Reservation, error) {
	rows, err := q.db.Query(ctx, getRoomReservations, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.UserID,
			&i.Status,
			&i.FromTime,
			&i.ToTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
update reservations set status=$1 where id =$2 returning id, room_id, user_id, status, from_time, to_time
`

type UpdateReservationParams struct {
	Status ReservationStatus `json:"status"`
	ID     pgtype.UUID       `json:"id"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, updateReservation, arg.Status, arg.ID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.UserID,
		&i.Status,
		&i.FromTime,
		&i.ToTime,
	)
	return i, err
}
