// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hotels.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotel = `-- name: CreateHotel :one
insert into hotels(name,city,country,owner_id,location,rating,image_urls)values($1,$2,$3,$4,$5,$6,$7)
 returning id, name, owner_id, rating, country, city, location, image_urls, status, created_at, updated_at
`

type CreateHotelParams struct {
	Name      string      `json:"name"`
	City      string      `json:"city"`
	Country   string      `json:"country"`
	OwnerID   pgtype.UUID `json:"owner_id"`
	Location  []float64   `json:"location"`
	Rating    float64     `json:"rating"`
	ImageUrls []string    `json:"image_urls"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (Hotel, error) {
	row := q.db.QueryRow(ctx, createHotel,
		arg.Name,
		arg.City,
		arg.Country,
		arg.OwnerID,
		arg.Location,
		arg.Rating,
		arg.ImageUrls,
	)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.Rating,
		&i.Country,
		&i.City,
		&i.Location,
		&i.ImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCountOfHotelsOfUser = `-- name: GetCountOfHotelsOfUser :one
SELECT COUNT(id) FROM hotels WHERE owner_id=$1
`

func (q *Queries) GetCountOfHotelsOfUser(ctx context.Context, ownerID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getCountOfHotelsOfUser, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getHotelByName = `-- name: GetHotelByName :one
 select id, name, owner_id, rating, country, city, location, image_urls, status, created_at, updated_at from hotels where name=$1
`

func (q *Queries) GetHotelByName(ctx context.Context, name string) (Hotel, error) {
	row := q.db.QueryRow(ctx, getHotelByName, name)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.Rating,
		&i.Country,
		&i.City,
		&i.Location,
		&i.ImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHotels = `-- name: GetHotels :many
select id, name, owner_id, rating, country, city, location, image_urls, status, created_at, updated_at from hotels limit 10
`

func (q *Queries) GetHotels(ctx context.Context) ([]Hotel, error) {
	rows, err := q.db.Query(ctx, getHotels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Rating,
			&i.Country,
			&i.City,
			&i.Location,
			&i.ImageUrls,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchHotels = `-- name: SearchHotels :many
SELECT DISTINCT h.id, h.name, h.owner_id, h.rating, h.country, h.city, h.location, h.image_urls, h.status, h.created_at, h.updated_at, MIN(rt.price) AS min_price
FROM hotels h
JOIN rooms r ON h.id = r.hotel_id
JOIN room_types rt ON r.room_type_id = rt.id
LEFT JOIN reservations res 
    ON r.id = res.room_id
    AND res.status IN ('PENDING', 'SUCCESSFUL')
    AND (
        (res.from_time < $2 AND res.to_time > $1)
    )
WHERE (h.city = $3 OR h.country = $3)
  AND rt.capacity >= $4
  AND res.id IS NULL
GROUP BY h.id
ORDER BY h.name
`

type SearchHotelsParams struct {
	ToTime   pgtype.Timestamptz `json:"to_time"`
	FromTime pgtype.Timestamptz `json:"from_time"`
	City     string             `json:"city"`
	Capacity int32              `json:"capacity"`
}

type SearchHotelsRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	OwnerID   pgtype.UUID        `json:"owner_id"`
	Rating    float64            `json:"rating"`
	Country   string             `json:"country"`
	City      string             `json:"city"`
	Location  []float64          `json:"location"`
	ImageUrls []string           `json:"image_urls"`
	Status    HotelStatus        `json:"status"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	MinPrice  interface{}        `json:"min_price"`
}

func (q *Queries) SearchHotels(ctx context.Context, arg SearchHotelsParams) ([]SearchHotelsRow, error) {
	rows, err := q.db.Query(ctx, searchHotels,
		arg.ToTime,
		arg.FromTime,
		arg.City,
		arg.Capacity,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchHotelsRow
	for rows.Next() {
		var i SearchHotelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Rating,
			&i.Country,
			&i.City,
			&i.Location,
			&i.ImageUrls,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MinPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const verifyHotel = `-- name: VerifyHotel :one
UPDATE hotels SET status='VERIFIED' WHERE id=$1 RETURNING id, name, owner_id, rating, country, city, location, image_urls, status, created_at, updated_at
`

func (q *Queries) VerifyHotel(ctx context.Context, id pgtype.UUID) (Hotel, error) {
	row := q.db.QueryRow(ctx, verifyHotel, id)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.Rating,
		&i.Country,
		&i.City,
		&i.Location,
		&i.ImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
