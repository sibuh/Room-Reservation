// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hotels.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotel = `-- name: CreateHotel :one
insert into hotels(name,city,country,owner_id,location,rating,image_urls)values($1,$2,$3,$4,$5,$6,$7)
 returning id, name, owner_id, rating, country, city, location, image_urls, status, created_at, updated_at
`

type CreateHotelParams struct {
	Name      string      `json:"name"`
	City      string      `json:"city"`
	Country   string      `json:"country"`
	OwnerID   pgtype.UUID `json:"owner_id"`
	Location  []float64   `json:"location"`
	Rating    float64     `json:"rating"`
	ImageUrls []string    `json:"image_urls"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (Hotel, error) {
	row := q.db.QueryRow(ctx, createHotel,
		arg.Name,
		arg.City,
		arg.Country,
		arg.OwnerID,
		arg.Location,
		arg.Rating,
		arg.ImageUrls,
	)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.Rating,
		&i.Country,
		&i.City,
		&i.Location,
		&i.ImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHotelByName = `-- name: GetHotelByName :one
 select id, name, owner_id, rating, country, city, location, image_urls, status, created_at, updated_at from hotels where name=$1
`

func (q *Queries) GetHotelByName(ctx context.Context, name string) (Hotel, error) {
	row := q.db.QueryRow(ctx, getHotelByName, name)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.Rating,
		&i.Country,
		&i.City,
		&i.Location,
		&i.ImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHotels = `-- name: GetHotels :many
select id, name, owner_id, rating, country, city, location, image_urls, status, created_at, updated_at from hotels limit 10
`

func (q *Queries) GetHotels(ctx context.Context) ([]Hotel, error) {
	rows, err := q.db.Query(ctx, getHotels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Rating,
			&i.Country,
			&i.City,
			&i.Location,
			&i.ImageUrls,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchHotels = `-- name: SearchHotels :many
select h.id, h.name, h.owner_id, h.rating, h.country, h.city, h.location, h.image_urls, h.status, h.created_at, h.updated_at 
 from hotels h
 join rooms r on r.hotel_id=h.id
 where h.city LIKE $1 or h.country LIKE $1
 and h.status = 'VERIFIED'
 and r.room_type_id in(select id from room_types where capacity >= $2)
 and r.id not in(
    select id from reservations where from_time between $3 and $4
                                                or to_time between $3 and $4
                                                and reservations.status in ( 'SUCCESSFUL','PENDING'))
`

type SearchHotelsParams struct {
	City       string             `json:"city"`
	Capacity   int32              `json:"capacity"`
	FromTime   pgtype.Timestamptz `json:"from_time"`
	FromTime_2 pgtype.Timestamptz `json:"from_time_2"`
}

func (q *Queries) SearchHotels(ctx context.Context, arg SearchHotelsParams) ([]Hotel, error) {
	rows, err := q.db.Query(ctx, searchHotels,
		arg.City,
		arg.Capacity,
		arg.FromTime,
		arg.FromTime_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Rating,
			&i.Country,
			&i.City,
			&i.Location,
			&i.ImageUrls,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
